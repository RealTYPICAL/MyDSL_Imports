module org.xtext.example.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "com.tool.small.mydsl"
var runtimeProject = "../${projectName}"

Workflow {
	
	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		ignoreBrokenProjectFiles = true
		scanClassPath = true
		platformUri= "${runtimeProject}"
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		registerGenModelFile = "platform:/resource/${projectName}/model/custom/MyDsl.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
	}
	
	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		generateCustomClasses = false
		genModel = "platform:/resource/${projectName}/model/custom/MyDsl.genmodel"
		srcPath = "platform:/resource/${projectName}/emf-gen"
	}
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "com.tool.small.mydsl"
				rootPath = rootPath
				genericIde = {
					enabled = true
				}
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "com.tool.small.mydsl.MyDsl"
			
			referencedResource = "platform:/resource/${projectName}/model/custom/MyDsl.genmodel"
			
			fileExtensions = "mydsl"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			generator = {
				generateXtendMain = true
			}
		}
	}
}
